<krpano>
	<!-- Skin Actions -->
	<action name="startup">
		<!--if(startscene === null, copy(startscene,scene[0].name));
		loadscene(get(startscene), null, MERGE);
		 set(autorotate.enabled,true); -->
		<!-- SET HEADING -->
		set(heading, 0);
	</action>

	<!-- hotspot animation action -->
	<action name="hotspot_animate">
		inc(frame,1,get(lastframe),0);
		mul(ypos,frame,frameheight);
		txtadd(crop,'0|',get(ypos),'|',get(framewidth),'|',get(frameheight));
		delayedcall(0.03, if(loaded, hotspot_animate() ) );
	</action>

	<!-- add button auto rotate -->
	<action name="autorotate_btn_events">
		switch(layer[skin_btn_rotate].crop, 64|512|64|64, 0|512|64|64);	 
	</action>

	<!-- change the rotation of the compass pointer / compass plate image -->
	<action name="rotatecompasses">
		sub(plugin[compass2_plate].rotate,  heading, view.hlookat);
	</action>

	<action name="share_button">
		copy(uri_share, skin_settings.share_url);
		set(fb_share, 'https://www.facebook.com/sharer/sharer.php?u=');
		set(tw_share, 'https://twitter.com/intent/tweet?text=Virtual Tour 360 by LensCoop&amp;url=');
		txtadd(uri, get(uri_share), '#', get(scene[get(xml.scene)].name) );
		<!-- txtadd(layer[skin_title].html, get(fb_share), get(uri)); -->
		if('%1' == 'Facebook', 
			txtadd(goshare, get(fb_share), get(uri));
			openurl(get(goshare), _blank);
			,
			if('%1' == 'Twitter', 
				txtadd(goshare, get(tw_share), get(uri));
				openurl(get(goshare), _blank);
			);
		);
		
	</action>
	
	<action name="skin_startup">
		if(device.mobile == false,
			copy(layer[skin_control_bar].y, skin_settings.controlbar_offset);
			copy(layer[skin_control_bar].y_opened, skin_settings.controlbar_offset);
			add(layer[skin_scroll_window].y, layer[skin_control_bar].height, layer[skin_control_bar].y);
			add(layer[skin_scroll_window].y_opened, layer[skin_control_bar].height, layer[skin_control_bar].y_opened);

			if(skin_settings.thumbs_opened, set(layer[skin_thumbs].state,'opened'); set(layer[skin_thumbs_container].visible,true); );

			copy(layer[skin_thumbs].draggable, skin_settings.thumbs_dragging);

			if(skin_settings.thumbs_onhoverscrolling,
				ifnot(device.touchdevice, set(layer[skin_thumbs].draggable, false));
				set(layer[skin_thumbs].onhover_autoscrolling, true);
			  );
		  );

		<!-- if(device.android, if(device.flash, set(skin_settings.bingmaps_zoombuttons, false); )); -->

		skin_addthumbs();
		skin_onresize();
		skin_updatescroll();

		copy(usegyro, skin_settings.gyro);
		<!-- if(device.desktop, set(usegyro, false)); -->
		<!-- if(device.flash, set(usegyro, false)); -->
		if(device.desktop,
			set(layer[skin_btn_gyro].enabled, false);
			set(layer[skin_btn_gyro].alpha, 0.3);
		  ,
			if(device.flash,
				set(layer[skin_btn_gyro].enabled, false);
				set(layer[skin_btn_gyro].alpha, 0.3);
			  ,
				set(layer[skin_btn_gyro].enabled, true);
				set(layer[skin_btn_gyro].alpha, 1.0);
			  );
		  );
		  if(device.fullscreensupport,
				set(layer[skin_btn_fs].enabled, true);
				set(layer[skin_btn_fs].alpha, 1.0);
			  ,
				set(layer[skin_btn_fs].enabled, false);
				set(layer[skin_btn_fs].alpha, 0.3);
			  );

		if(usegyro, copy(plugin[skin_gyro].url, plugin[skin_gyro].html5_url); );

		<!--
		if(skin_settings.bingmaps == true,
			set(layer[skin_btn_map].visible, true);
			copy(layer[skin_map].key, skin_settings.bingmaps_key);
			copy(layer[skin_map_zoom_in].visible,  skin_settings.bingmaps_zoombuttons);
			copy(layer[skin_map_zoom_out].visible, skin_settings.bingmaps_zoombuttons);
			if(device.flash, copy(layer[skin_map].url, layer[skin_map].flash_url), copy(layer[skin_map].url, layer[skin_map].html5_url) );
		  ,
			if(device.mobile, copy(layer[skin_btn_gyro].x, layer[skin_btn_map].x) );
		  );
		-->
	</action>

	<action name="skin_addthumbs">
		copy(thumbwidth, skin_settings.thumbs_width);
		copy(thumbheight, skin_settings.thumbs_height);
		copy(thumbpadding, skin_settings.thumbs_padding);
		copy(thumbcrop, skin_settings.thumbs_crop);

		if(device.mobile,
			mul(thumbwidth,2);
			mul(thumbheight,2);
			mul(thumbpadding,2);
		  );

		add(thumbxoffset, thumbwidth, thumbpadding);
		mul(thumbxcenter, thumbxoffset, 0.5);
		mul(thumbbarwidth, thumbxoffset, scene.count);
		add(thumbbarwidth, thumbpadding);
		add(thumbbarheight, thumbpadding, thumbheight);
		add(thumbbarheight, thumbpadding);

		if (skin_settings.thumbs_scrollindicator,
			copy(layer[skin_thumbs_scrollindicator].y, thumbbarheight);
			add(thumbbarheight, layer[skin_thumbs_scrollindicator].height);
		);

		copy(layer[skin_thumbs].height, thumbbarheight);
		copy(layer[skin_thumbs].width, thumbbarwidth);

		mul(halfheight, thumbbarheight, 0.5);
		copy(layer[skin_thumbs_scrollleft].y, halfheight);
		copy(layer[skin_thumbs_scrollright].y, halfheight);

		for(set(i,0), i LT scene.count, inc(i),
			txtadd(thumbname,'skin_thumb_',get(i));
			addlayer(get(thumbname));
			copy(layer[get(thumbname)].url, scene[get(i)].thumburl);
			set(layer[get(thumbname)].keep, true);
			set(layer[get(thumbname)].parent, 'skin_thumbs');
			set(layer[get(thumbname)].align, lefttop);
			copy(layer[get(thumbname)].crop, thumbcrop);
			copy(layer[get(thumbname)].width, thumbwidth);
			copy(layer[get(thumbname)].height, thumbheight);
			mul(thumbx, i, thumbxoffset);
			add(thumbx, thumbpadding);
			copy(layer[get(thumbname)].x, thumbx);
			copy(layer[get(thumbname)].y, thumbpadding);
			add(scene[get(i)].thumbx, thumbx, thumbxcenter);
			copy(scene[get(i)].thumby, thumbpadding);
			set(layer[get(thumbname)].linkedscene, get(scene[get(i)].name) );
			set(layer[get(thumbname)].onclick, copy(layer[skin_thumbborder].parent, name); loadscene(get(linkedscene), null, MERGE, BLEND(0.5)); );
			if(skin_settings.tooltips_thumbs,
				set(layer[get(thumbname)].tooltip, get(scene[get(i)].title) );
				layer[get(thumbname)].loadstyle(skin_tooltips);
			  );
			if(skin_settings.thumbs_text,
				txtadd(thumbtext, 'skin_thumbtext_', get(i));
				addlayer(get(thumbtext));
				layer[get(thumbtext)].loadstyle(skin_thumbtext_style);
				set(layer[get(thumbtext)].keep, true);
				set(layer[get(thumbtext)].parent, get(thumbname));
				set(layer[get(thumbtext)].html, get(scene[get(i)].title));
			  );
		   );
	</action>

	<action name="skin_addmapspots">
		for(set(i,0), i LT scene.count, inc(i),
			if(scene[get(i)].lat,
				txtadd(spotname, 'spot', get(i));
				txtadd(spotclickevent, 'skin_hidetooltips(); activatespot(',get(spotname),'); loadscene(', get(scene[get(i)].name), ',null,MERGE,BLEND(1)); skin_updatescroll(); delayedcall(0.5,skin_showmap(false));');
				copy(scene[get(i)].mapspotname, spotname);
				addspot(get(spotname), get(scene[get(i)].lat), get(scene[get(i)].lng), get(scene[get(i)].heading), false, get(spotclickevent), null);
				if(skin_settings.tooltips_mapspots,
					set(layer[skin_map].spot[get(spotname)].tooltip, get(scene[get(i)].title) );
					txtadd(layer[skin_map].spot[get(spotname)].onover, 'set(hovering,true);',  get(style[skin_tooltips].onover) );
					txtadd(layer[skin_map].spot[get(spotname)].onout,  'set(hovering,false);', get(style[skin_tooltips].onout)  );
				  );
			  );
		  );
		activatespot(spot0);
		zoomToSpotsExtent();
	</action>

	<action name="skin_onresize">
		mul(mh, stageheight, -1);
		if(layer[skin_thumbs].state == 'opened', add(mh,layer[skin_thumbs].height); );
		set(layer[skin_scroll_layer].y, get(mh));
		sub(wid, stagewidth, 242);
		<!--sub(hei, stageheight, 100);
		set(layer[navigation-left-menu].height, get(hei));-->
		<!--set(layer[skin_title].html, get(wid));
		set(layer[skin_title].html, get(hei));
		txtadd(layer[skin_title].html, 'width: ', get(wid), ' - height: ', get(hei));-->
		<!--set(layer[skin_title].visible,true)-->

		ifnot(device.mobile, 
			if(stagewidth LT 480, 
				skin_showbuttons(false);
				set(layer[skin_btn_show].visible,false);
				set(layer[skin_btn_show_container].visible,false);
				tween(layer[skin_btn_show].alpha,0,0);
				tween(layer[skin_btn_show_container].alpha,0,0);
				set(layer[skin_scroll_layer].width, 0);
				, 
				if(stageheight LT 480, 
					skin_showbuttons(false);
					set(layer[skin_btn_show].visible,false);
					set(layer[skin_btn_show_container].visible,false);
					tween(layer[skin_btn_show].alpha,0,0);
					tween(layer[skin_btn_show_container].alpha,0,0);
					set(layer[skin_scroll_layer].width, 0);
					, 
					if(layer[navigation-right-menu].state == 'opened', if(layer[skin_thumbs].state == 'opened', skin_showbuttons(true);) );
					set(layer[skin_scroll_layer].width, get(wid));
				);
			)
		);
		if(device.mobile,
			if(layer[skin_thumbs].state == 'closed', 
				sub(full_height, stageheight, 80);
				sub(nav_right, stageheight, 280);
				set(layer[navigation-right-menu].height, get(full_height) );
			);
		);
	</action>

	<action name="skin_showbuttons">
		if(%1 == false,
			set(layer[skin_logo].scale, 0.5);
			set(plugin[compass2].scale, 0.35);
			set(plugin[compass2].destscale, 0.35);
			set(plugin[compass2].onclick, switch(destscale,0.35,0.5);tween(scale,get(destscale)););
			skin_hideskin();
		,
			set(layer[skin_logo].scale, 0.9);
			set(plugin[compass2].scale, 0.55);
			set(plugin[compass2].destscale, 0.55);
			set(plugin[compass2].onclick, switch(destscale,0.55,1.0);tween(scale,get(destscale)););
			skin_showskin();
		);
	</action>

	<action name="skin_updatescroll">
		if(layer[skin_thumbs].loaded,
			set(cursceneindex, 0);
			if(xml.scene, copy(cursceneindex, scene[get(xml.scene)].index));
			layer[skin_thumbs].setcenter(get(scene[get(cursceneindex)].thumbx), get(scene[get(cursceneindex)].thumby));
		  );
	</action>

	<action name="skin_updatethumbscroll">
		copy(padding,skin_settings.thumbs_padding);
		if(device.mobile, mul(padding,2));

		if(skin_settings.thumbs_scrollbuttons,
			if(loverflow GT 0, set(layer[skin_thumbs_scrollleft].visible,true),  set(layer[skin_thumbs_scrollleft].visible,false) );
			if(roverflow GT 0, set(layer[skin_thumbs_scrollright].visible,true), set(layer[skin_thumbs_scrollright].visible,false) );
		  );

		if(skin_settings.thumbs_scrollindicator,
			if(woverflow GT 0,
				set(layer[skin_thumbs_scrollindicator].visible,true);
				sub(iw,pixelwidth,woverflow);
				div(pw,iw,pixelwidth);
				div(px,loverflow,woverflow);
				mul(pw,iw);
				copy(layer[skin_thumbs_scrollindicator].width,pw);
				sub(iw,pw);
				sub(iw,padding);
				sub(iw,padding);
				mul(px,iw);
				add(px,padding);
				copy(layer[skin_thumbs_scrollindicator].x,px);
			  ,
				set(layer[skin_thumbs_scrollindicator].visible,false);
			  );
		  );
	</action>

	<action name="skin_update_scene_infos">
		if(xml.scene !== null,
			if(scene[get(xml.scene)].index GE 0,
				<!--if(title, txtadd(layer[skin_title].html, get(title), ' - ', get(scene[get(xml.scene)].title) ); , copy(layer[skin_title].html, scene[get(xml.scene)].title ); );
				delayedcall(0.1, set(layer[skin_title].visible,true) );-->

				if(title, 
					copy(layer[text-description].html, data[get(scene[get(xml.scene)].name)].content ); , 
					copy(layer[text-description].html, data[get(scene[get(xml.scene)].name)].content ); );
				
				if(title, 
					txtadd(layer[navigation-right-title].html, get(title), ' - ', get(scene[get(xml.scene)].title) ); , 
					copy(layer[navigation-right-title].html, scene[get(xml.scene)].title ); );
				delayedcall(0.1, set(layer[navigation-right-title].visible,true) );

				if(skin_settings.thumbs_loop == false,
					if(scene[get(xml.scene)].index GT 0,
						set(layer[skin_btn_prev].enabled, true);
						set(layer[skin_btn_prev].alpha, 1.0);
					  ,
						set(layer[skin_btn_prev].enabled, false);
						set(layer[skin_btn_prev].alpha, 0.3);
					  );

					sub(lastsceneindex, scene.count, 1);
					if(scene[get(xml.scene)].index LT lastsceneindex,
						set(layer[skin_btn_next].enabled, true);
						set(layer[skin_btn_next].alpha, 1.0);
					  ,
						set(layer[skin_btn_next].enabled, false);
						set(layer[skin_btn_next].alpha, 0.3);
					  );
				  ,
					if(scene.count GT 1,
						set(layer[skin_btn_prev].enabled, true);
						set(layer[skin_btn_prev].alpha, 1.0);
						set(layer[skin_btn_next].enabled, true);
						set(layer[skin_btn_next].alpha, 1.0);
					  ,
						set(layer[skin_btn_prev].enabled, false);
						set(layer[skin_btn_prev].alpha, 0.3);
						set(layer[skin_btn_next].enabled, false);
						set(layer[skin_btn_next].alpha, 0.3);
					  );
				  );

				txtadd(layer[skin_thumbborder].parent, 'skin_thumb_', get(scene[get(xml.scene)].index));
				set(layer[skin_thumbborder].visible, true);

				if(scene[get(xml.scene)].mapspotname,
					layer[skin_map].activatespot(get(scene[get(xml.scene)].mapspotname));
					layer[skin_map].pantospot(get(scene[get(xml.scene)].mapspotname));
				  );
			  );
		  );
	</action>

	<action name="skin_nextscene">
		add(newsceneindex, scene[get(xml.scene)].index, %1);
		if(newsceneindex GE 0,
			if(newsceneindex LT scene.count,
				txtadd(layer[skin_thumbborder].parent, 'skin_thumb_', get(newsceneindex));
				layer[skin_thumbs].scrolltocenter(get(scene[get(newsceneindex)].thumbx), get(scene[get(newsceneindex)].thumby));
				loadscene(get(scene[get(newsceneindex)].name), null, MERGE, BLEND(0.5));
			  );
		  );
	</action>

	<action name="skin_nextscene_loop">
		add(newsceneindex, scene[get(xml.scene)].index, %1);
		sub(lastsceneindex, scene.count, 1);
		if(newsceneindex LT 0, copy(newsceneindex,lastsceneindex));
		if(newsceneindex GT lastsceneindex, set(newsceneindex,0));
		layer[skin_thumbs].scrolltocenter(get(scene[get(newsceneindex)].thumbx), get(scene[get(newsceneindex)].thumby));
		loadscene(get(scene[get(newsceneindex)].name), null, MERGE, BLEND(0.5));
	</action>

	<action name="skin_showloading">
		set(layer[skin_loadingtext].visible, %1);
	</action>

	<action name="skin_hidetooltips">
		set(layer[skin_tooltip].alpha,0.0);
		set(layer[skin_tooltip].visible,false);
	</action>

	<action name="skin_buttonglow">
		if(%1 != null,
			set(strength,0.7);
			if(%2 != null, set(strength,%2));
			set(layer[skin_buttonglow].parent, %1);
			set(layer[skin_buttonglow].visible, true);
			tween(layer[skin_buttonglow].alpha, get(strength), 0.07);
		  ,
			tween(layer[skin_buttonglow].alpha, 0.0, 0.1, default, set(layer[skin_buttonglow].parent, null); set(layer[skin_buttonglow].visible, false); );
		  );
	</action>

	<action name="skin_hideskin">
		if(layer[skin_thumbs].state != 'closed', skin_showthumbs(false); wait(0.25); );
		tween(layer[skin_scroll_window].y, get(layer[skin_scroll_window].y_closed), 0.5, easeOutQuint);
		tween(layer[navigation-right-menu].x, get(layer[navigation-right-menu].x_closed), 0.5, easeOutQuint);\
		set(layer[navigation-right-menu].state, 'closed');
		set(layer[skin_btn_show].visible,true);
		set(layer[skin_btn_show_container].visible,true);
		tween(layer[skin_btn_show].alpha, 1, 0.25, easeOutQuint);
		tween(layer[skin_btn_show_container].alpha, 1, 0.25, easeOutQuint);
	</action>

	<action name="skin_showskin">
		if(layer[skin_thumbs].state == 'closed', 
			ifnot(device.mobile,
				skin_showthumbs(true); 
				wait(0.25); 
			)
		);
		tween(layer[skin_scroll_window].y, get(layer[skin_scroll_window].y_opened), 0.5, easeOutQuint);
		tween(layer[navigation-right-menu].x, get(layer[navigation-right-menu].x_opened), 0.5, easeOutQuint);
		set(layer[navigation-right-menu].state, 'opened');
		set(layer[skin_btn_show].visible,false);
		set(layer[skin_btn_show_container].visible,false);
		tween(layer[skin_btn_show].alpha,0,0);
		tween(layer[skin_btn_show_container].alpha,0,0);
	</action>

	<action name="skin_showthumbs">
		if(%1 == null, if(layer[skin_thumbs].state == 'closed', set(show,true), set(show,false)); , set(show,%1); );
		mul(mh, layer[skin_scroll_layer].pixelheight, -1);
		if(layer[skin_scroll_layer].y == -100%, copy(layer[skin_scroll_layer].y,mh));
		if(show,
			set(layer[skin_thumbs].state, 'opened');
			add(mh, layer[skin_thumbs].height);
			tween(layer[skin_scroll_layer].y, get(mh), 0.5, easeOutQuint);
			set(layer[skin_thumbs_container].visible, true);
			tween(layer[skin_thumbs_container].alpha, 1.0, 0.25);
			sub(full_height, stageheight, 80);
			sub(nav_right, stageheight, 280);
			if(device.mobile, 
				set(layer[navigation-right-menu].height, get(nav_right) );
				set(layer[toolbar-3].y, get(layer[toolbar-3].y_opened) );
			);
		  ,
			set(layer[skin_thumbs].state, 'closed');
			tween(layer[skin_scroll_layer].y, get(mh), 0.5, easeOutQuint, set(layer[skin_thumbs_container].visible, false););
			if(device.mobile, 
				set(layer[navigation-right-menu].height, get(full_height) );
				set(layer[toolbar-3].y, get(layer[toolbar-3].y_closed) );
			);
		  );
	</action>

	<action name="skin_openlogo">
		if(layer[skin_logo].state == 'small',
			set(layer[skin_logo].state, 'opening');
			copy(backup_logo_align, layer[skin_logo].align);
			copy(backup_logo_x, layer[skin_logo].x);
			copy(backup_logo_y, layer[skin_logo].y);
			copy(backup_logo_scale, layer[skin_logo].scale);
			layer[skin_logo].changeorigin(center);
			tween(layer[skin_logo].x, 0, 0.5, easeOutQuint);
			tween(layer[skin_logo].y, 0, 0.5, easeOutQuint);
			tween(layer[skin_logo].scale, 1, 0.5, easeOutQuint);
			delayedcall(0.5, set(layer[skin_logo].state, 'opened') );
			delayedcall(0, set(events[skin_events].onmouseup, delayedcall(0, skin_closelogo()) ) );
		  );
	</action>

	<action name="skin_closelogo">
		if(layer[skin_logo].state == 'opened',
			set(layer[skin_logo].state, 'closing');
			layer[skin_logo].changeorigin(get(backup_logo_align));
			if(%1 == 'now',
				stoptween(layer[skin_logo].x, layer[skin_logo].y, layer[skin_logo].scale);
				copy(layer[skin_logo].x, backup_logo_x);
				copy(layer[skin_logo].y, backup_logo_y);
				copy(layer[skin_logo].scale, backup_logo_scale);
				set(layer[skin_logo].state, 'small');
			  ,
				tween(layer[skin_logo].x, get(backup_logo_x), 0.5, easeOutQuint);
				tween(layer[skin_logo].y, get(backup_logo_y), 0.5, easeOutQuint);
				tween(layer[skin_logo].scale, get(backup_logo_scale), 0.5, easeOutQuint);
				delayedcall(0.5, set(layer[skin_logo].state, 'small'));
			  );
			set(events[skin_events].onmouseup, null);
		  );
	</action>
</krpano>